# The user and group under which the worker processes run is configured using this parameter.
# If the group is omitted, a group name equal to that of the user is used.
# Run as a less privileged user for security reasons.
user www-data;

# This is the number of worker processes that will be started. These will handle all connections made by the clients.
# Choosing the right number depends on the server environment, the disk subsystem, and the network infrastructure.
# A good rule of thumb is to set this equal to the number of processor cores for CPU-bound loads and to multiply this number
# by 1.5 to 2 for I/ O bound loads.
worker_processes 4;

pid /var/run/nginx.pid;

# Run Nginx in the foreground for Docker.
daemon off;

# Explicitly specifying the path to the mandatory error log
# error_log  logs/error.log  debug;
error_log  /var/log/nginx_error.log  error;

# Sets up a new configuration context for the 'events' module
events {
    # the product of this number and the number of worker_processes
    # indicates how many simultaneous connections per IP:port pair are
    # accepted
    worker_connections  768;

    # Syntax: multi_accept on | off;
    # Default: multi_accept off;
    # Context: events
    # If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time.
    #
    # multi_accept on;

    # nginx supports a variety of connection processing methods. The availability of a particular method depends on the platform used. On platforms that support
    # several methods nginx will normally select the most efficient method automatically. However, if needed, a connection processing method can be selected explicitly
    # with the use directive.
    #
    # The following connection processing methods are supported:
    #
    #     select — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The --with-select_module and --without-select_module configuration parameters can be used to forcibly enable or disable the build of this module.
    #     poll — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The --with-poll_module and --without-poll_module configuration parameters can be used to forcibly enable or disable the build of this module.
    #     kqueue — efficient method used on FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0, and Mac OS X.
    #     epoll — efficient method used on Linux 2.6+.
    # Some older distributions like SuSE 8.2 provide patches that add epoll support to 2.4 kernels.
    #     /dev/poll — efficient method used on Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+, and Tru64 UNIX 5.1A+.
    #     eventport — event ports, efficient method used on Solaris 10.
    #
    use epoll;
}

http {

        ##
        # Basic Settings
        ##

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        # server_tokens off;

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        gzip on;
        gzip_disable "msie6";

        # gzip_vary on;
        # gzip_proxied any;
        # gzip_comp_level 6;
        # gzip_buffers 16 8k;
        # gzip_http_version 1.1;
        # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        ##
        # nginx-naxsi config
        ##
        # Uncomment it if you installed nginx-naxsi
        ##

        #include /etc/nginx/naxsi_core.rules;

        ##
        # nginx-passenger config
        ##
        # Uncomment it if you installed nginx-passenger
        ##

        #passenger_root /usr;
        #passenger_ruby /usr/bin/ruby;

        ##
        # Virtual Host Configs
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}


#mail {
#       # See sample authentication script at:
#       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#       # auth_http localhost/auth.php;
#       # pop3_capabilities "TOP" "USER";
#       # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#       server {
#               listen     localhost:110;
#               protocol   pop3;
#               proxy      on;
#       }
#
#       server {
#               listen     localhost:143;
#               protocol   imap;
#               proxy      on;
#       }
#}
